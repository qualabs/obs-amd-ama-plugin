name: 'Set up and build plugin'
description: 'Builds the plugin for specified architecture and build config'
inputs:
  target:
    description: 'Target architecture for dependencies'
    required: true
  config:
    description: 'Build configuration'
    required: false
    default: 'RelWithDebInfo'
  codesign:
    description: 'Enable codesigning (macOS only)'
    required: false
    default: 'false'
  codesignIdent:
    description: 'Developer ID for application codesigning (macOS only)'
    required: false
    default: '-'
  workingDirectory:
    description: 'Working directory for packaging'
    required: false
    default: ${{ github.workspace }}
runs:
  using: composite
  steps:
    - name: Install Dependencies 🛍️
      if: runner.os == 'Linux'
      shell: bash
      run: |
        : Install Dependencies 🛍️
        echo ::group::Install Dependencies
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH
        brew install --quiet zsh
        wget -qO - https://www.xilinx.com/support/download/2018-2-1/xilinx-master-signing-key.asc | sudo apt-key add -
        echo "deb [trusted=yes] https://packages.xilinx.com/artifactory/debian-packages $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/xilinx.list
        sudo apt update
        sudo DEBIAN_FRONTEND=noninteractive apt -yq install amd-ama-core amd-ama-xma
        echo ::endgroup::

    - name: Run Ubuntu Build
      if: runner.os == 'Linux'
      shell: zsh --no-rcs --errexit --pipefail {0}
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        : Run Ubuntu Build

        local -a build_args=(
          --target linux-${{ inputs.target }}
          --config ${{ inputs.config }}
        )
        if (( ${+RUNNER_DEBUG} )) build_args+=(--debug)

        .github/scripts/build-linux ${build_args}

    - name: Create Summary 📊
      if: contains(fromJSON('["Linux", "macOS"]'),runner.os)
      shell: zsh --no-rcs --errexit --pipefail {0}
      env:
        CCACHE_CONFIGPATH: ${{ inputs.workingDirectory }}/.ccache.conf
      run: |
        : Create Summary 📊

        local -a ccache_data
        if (( ${+RUNNER_DEBUG} )) {
          setopt XTRACE
          ccache_data=("${(fA)$(ccache -s -vv)}")
        } else {
          ccache_data=("${(fA)$(ccache -s)}")
        }

        print '### ${{ runner.os }} Ccache Stats (${{ inputs.target }})' >> $GITHUB_STEP_SUMMARY
        print '```' >> $GITHUB_STEP_SUMMARY
        for line (${ccache_data}) {
          print ${line} >> $GITHUB_STEP_SUMMARY
        }
        print '```' >> $GITHUB_STEP_SUMMARY
